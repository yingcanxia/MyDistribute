<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop 
	   http://www.springframework.org/schema/aop/spring-aop.xsd"
	   >
	<!-- 启用注解 -->
	<context:annotation-config />
	<context:component-scan base-package="cn.shadow" />
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >  
		<property name="locations" >  
			<list>  
                 <value>classpath*:application.properties</value><!-- 配置 -->
                 <value>classpath*:jdbc.properties</value><!-- 配置 -->
            </list>  
        </property>
	</bean> 

	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
		<property name="dataSource" ref="userDataSource"></property>
 	</bean>
	<bean id="userDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${datasource.user.url}" />  
         <property name="username" value="${datasource.user.username}" />  
         <property name="password" value="${datasource.user.password}" />
         <!-- <property name="password">${datasource.user.password}</property> -->  
         <property name="driverClassName" value="${datasource.user.driverClassName}" />  
         <property name="filters" value="${datasource.user.filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${datasource.user.maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${datasource.user.initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${datasource.user.maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${datasource.user.minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${datasource.user.timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${datasource.user.minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${datasource.user.validationQuery}" />  
         <property name="testWhileIdle" value="${datasource.user.testWhileIdle}" />  
         <property name="testOnBorrow" value="${datasource.user.testOnBorrow}" />  
         <property name="testOnReturn" value="${datasource.user.testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${datasource.user.maxPoolPreparedStatementPerConnectionSize}" />
         <property name="poolPreparedStatements" value="${datasource.user.poolPreparedStatements}"/>
	</bean> 

	<bean id="userSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="userDataSource" />
		<property name="typeAliasesPackage"
				  value="cn.shadow.entity" />
		<property name="mapperLocations" value="classpath*:mappers/*.xml" />
	</bean>

	<bean name="userMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
				  value="cn.shadow.dao" />
		<!-- <property name="sqlSessionFactory" ref="userSqlSessionFactory" /> -->
		<property name="sqlSessionFactoryBeanName" value="userSqlSessionFactory" />
	</bean>
	<!-- 这个问题是无法识别占位符，就是在加载过程中直接把 ${jdbc.maxActive }当做字符串处理了。
	myabatis使用MapperScannerConfigurer扫描模式后他会优先于PropertyPlaceholderConfigurer执行，
	所以这个时候，${jdbc.maxActive }还没有被properties文件里面的值所替换，就出现TypeMismatchException，然后就异常了。 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="execut*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 采用cglib代理，不需要声明接口 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* cn.shadow.service..*(..))" /><!-- 记得修改 -->
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>

</beans>